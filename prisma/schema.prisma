generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
// model Account {
//     id                String  @id @default(auto()) @map("_id") @db.ObjectId
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String? // @db.Text
//     access_token      String? // @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String? // @db.Text
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
// }

// model User {
//     id            String    @id @default(auto()) @map("_id") @db.ObjectId
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
// }

// model VerificationToken {
//     id         String   @id @default(auto()) @map("_id") @db.ObjectId
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }

type Specs {
    model  String
    others String
}

model Product {
    id                 String   @id @default(auto()) @map("_id") @db.ObjectId
    brand              String
    category           String
    description        String
    discountPercentage Float
    images             String[]
    price              Int
    promotion          String[]
    rating             Float
    status             String
    stock              Int
    tags               String[]
    thumbnail          String
    title              String
    sold               Int?
    sid                String
    package            String
    specs              Specs
}

enum VRole {
    owner
    admin
}

enum AuthRole {
    vendor
    admin
}

enum MStatus {
    disabled
    active
    review
}

type StoreVendor {
    id     String
    role   VRole
    status MStatus
    email  String
}

model Store {
    id      String        @id @default(auto()) @map("_id") @db.ObjectId
    vendors StoreVendor[]
    name    String
    about   String
}

enum VendorStatus {
    active
    disabled
}

model Vendor {
    id        String       @id @default(auto()) @map("_id") @db.ObjectId
    firstName String
    lastName  String
    uid       String?
    role      AuthRole     @default(vendor)
    email     String       @unique()
    photoUrl  String?
    phoneNo   String
    store     String[]
    location  String       @default("")
    address   String       @default("")
    status    VendorStatus @default(active)
}

enum NType {
    support
    complaint
    order
}

enum NStatus {
    opened
    sealed
    pinned
}

model Notification {
    id     String   @id @default(auto()) @map("_id") @db.ObjectId
    on     DateTime @default(now())
    read   DateTime @updatedAt()
    status NStatus
    title  String
    body   String
    type   NType
}

type OrdersItem {
    id                 String  @map("_id")
    brand              String?
    description        String
    discountPercentage Float?
    price              Int
    quantity           Int
    shortDescription   String?
    thumbnail          String?
    title              String
}

type OrdersPayment {
    method String
    date   DateTime?
}

type OrdersShippingDetails {
    address   String
    email     String
    firstName String
    lastName  String
    location  String
    notes     String?
    phone     String
    state     String
}

type OrdersShippingInfo {
    address   String
    email     String
    firstName String
    lastName  String
    location  String
    notes     String
    phone     String
    state     String
}

type OrdersShippingOption {
    price Int
    type  String
}

enum OrderStatus {
    pending
    successful
    failed
    cancelled
    closedPay
}

model Order {
    id               String                @id @default(auto()) @map("_id") @db.ObjectId
    customerId       String                @default("guest")
    dateTime         DateTime              @default(now()) @db.Date
    items            OrdersItem[]
    orderId          String
    payment          OrdersPayment
    shipping_details OrdersShippingDetails
    shipping_option  OrdersShippingOption
    status           OrderStatus           @default(pending)
    subTotal         Int
    total            Int
    txRef            String?
    sid              String
}

type SaleCustomer {
    name String
    id   String
}

model Sale {
    id       String       @id @default(auto()) @map("_id") @db.ObjectId
    customer SaleCustomer
}
